---
AWSTemplateFormatVersion: '2010-09-09'
Description: Architecture to host ECS Cluster, ECS Auto-Scaling Goups.
Parameters:
  EnvironmentName:
    Description: Name of the Environment
    Type: String

  BusinessUnit:
    Description: Name of the Organization
    Type: String

  InstanceType1:
    Description: Which instance type should we use to build the ECS cluster?
    Type: String
    Default: m5.xlarge

  MSMinSize:
    Description: How many Min. ECS hosts do you want to deploy?
    Type: Number
    Default: 2

  InstanceType2:
    Description: Which instance type should we use to build the ECS cluster?
    Type: String
    Default: m5.large

  MSMaxSize:
    Description: How many Max. ECS hosts do you want to deploy?
    Type: Number
    Default: 6

  WAMinSize:
    Description: How many  Min. ECS hosts do you want to deploy?
    Type: Number
    Default: 2

  WAMaxSize:
    Description: How many Max. ECS hosts do you want to deploy?
    Type: Number
    Default: 3

  DesiredCapacity:
    Description: How many ECS hosts do you want to initially deploy?
    Type: Number
    Default: 3
  
  ECSVolumeSize:
    Description: Volume Size of ECS EC2 Instances
    Type: String
    Default: 256

  ECSAMI:
    Description: ECS-Optimized AMI ID
    Type: AWS::EC2::Image::Id
    Default: ami-0d46dc3f90949ab1c

  KeyName:
    Description: Name of the key to login on ecs cluster
    Type: String
    Default:  "APIM-PROD-ECS-Key"

  EmailIDNotification:
    Description: Email ID to create SNS
    Type: String
    Default: nitin.sharma1@srijan.net

Resources:

  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Sub "{{resolve:ssm:/${BusinessUnit}/${EnvironmentName}/vpc:1}}"
      GroupDescription: Access to the ECS hosts and the tasks/containers that run on them
      SecurityGroupIngress:
        - SourceSecurityGroupId: !Sub "{{resolve:ssm:/${BusinessUnit}/${EnvironmentName}/LoadBalancerSecurityGroup:1}}"
          IpProtocol: -1
          FromPort: -1
          ToPort: -1

        - CidrIp: !Sub "{{resolve:ssm:/${BusinessUnit}/${EnvironmentName}/vpccidr:1}}"
          IpProtocol: -1
          FromPort: -1
          ToPort: -1
          
      Tags:
        - Key: Name
          Value: ecs-apm-prdisg-sg01
        - Key: Backup 
          Value: Weekly
        - Key: Deployment
          Value: PROD:PREP
        - Key: Project
          Value: APIMONETIZATION
        - Key: Cost Center
          Value: ISG-TECAPIMON/18
        - Key: WBS Code
          Value: ISG-TECAPIMON/18 
        - Key: Platform Name
          Value: APIMONETIZATION  

  ECSClusterMS:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Join ["-", [!Ref BusinessUnit, !Ref EnvironmentName, 'mservice', 'cluster']]

  ECSClusterWA:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Join ["-", [!Ref BusinessUnit, !Ref EnvironmentName, 'webapp', 'cluster']]

  SNSTopic:
    Type: AWS::SNS::Topic
    Properties: 
       DisplayName: !Join ["-", [!Ref BusinessUnit, !Ref EnvironmentName]]
       TopicName: !Join ["-", [!Ref BusinessUnit, !Ref EnvironmentName]]

  SNSSubscription:
    Type: AWS::SNS::Subscription
    Properties:
       Endpoint: !Ref EmailIDNotification
       Protocol: email
       TopicArn: !Ref 'SNSTopic'

  ECSAutoScalingGroupMS:
    DependsOn: ECSClusterMS
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: APMASGPD01
      LaunchConfigurationName: !Ref ECSLaunchConfigurationMS
      VPCZoneIdentifier: 
       - !Sub "{{resolve:ssm:/${BusinessUnit}/${EnvironmentName}/privatesubnet1:1}}"
       - !Sub "{{resolve:ssm:/${BusinessUnit}/${EnvironmentName}/privatesubnet2:1}}"
      MinSize: !Ref MSMinSize
      MaxSize: !Ref MSMaxSize
      DesiredCapacity: !Ref DesiredCapacity
      NotificationConfigurations:
      - TopicARN:
          !Ref SNSTopic
        NotificationTypes:
        - autoscaling:EC2_INSTANCE_LAUNCH
        - autoscaling:EC2_INSTANCE_LAUNCH_ERROR
        - autoscaling:EC2_INSTANCE_TERMINATE
        - autoscaling:EC2_INSTANCE_TERMINATE_ERROR
      Tags:
        - Key: Businessunit
          Value: !Ref BusinessUnit
          PropagateAtLaunch: "true"
        - Key: Environment
          Value: !Ref EnvironmentName
          PropagateAtLaunch: "true"
        - Key: Component
          Value: ecs
          PropagateAtLaunch: "true"
          PropagateAtLaunch: "true"
        - Key: Backup 
          Value: Weekly
          PropagateAtLaunch: "true"
        - Key: Deployment
          Value: PROD:PREP
          PropagateAtLaunch: "true"
        - Key: Project
          Value: APIMONETIZATION
          PropagateAtLaunch: "true"
        - Key: Cost Center
          Value: ISG-TECAPIMON/18
          PropagateAtLaunch: "true"
        - Key: WBS Code
          Value: ISG-TECAPIMON/18 
          PropagateAtLaunch: "true"
        - Key: Name
          Value: VMAPMAPD01 
          PropagateAtLaunch: "true"
        - Key: Platform Name
          Value: APIMONETIZATION
          PropagateAtLaunch: "true"
    
  ECSLaunchConfigurationMS:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: false
      ImageId: !Ref ECSAMI
      InstanceType: !Ref InstanceType1
      KeyName: !Ref KeyName
      SecurityGroups:
        - !Ref ECSSecurityGroup
      IamInstanceProfile: !Ref ECSInstanceProfile
      BlockDeviceMappings: 
        - DeviceName: "/dev/xvda"
          Ebs: 
            VolumeSize: !Ref ECSVolumeSize
            DeleteOnTermination: true
            Encrypted: true
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          sed -i 's/globe-qa-cluster/apim-prod-mservice-cluster/' /etc/ecs/ecs.config
          docker rm -vf ecs-agent
          rm -rf /var/lib/ecs/data/ecs_agent_data.json
          docker run --name ecs-agent --detach=true --restart=on-failure:10 --volume=/var/run:/var/run --volume=/var/log/ecs/:/log --volume=/var/lib/ecs/data:/data --volume=/etc/ecs:/etc/ecs --net=host --env-file=/etc/ecs/ecs.config amazon/amazon-ecs-agent:latest
          mkdir -p /opt/aws/bin
          wget https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
          easy_install --script-dir /opt/aws/bin aws-cfn-bootstrap-latest.tar.gz
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ECSAutoScalingGroup --region ${AWS::Region}

  ECSAutoScalingGroupWA:
    DependsOn: ECSClusterWA
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: APMASGPD02
      LaunchConfigurationName: !Ref ECSLaunchConfigurationWA
      VPCZoneIdentifier: 
        - !Sub "{{resolve:ssm:/${BusinessUnit}/${EnvironmentName}/privatesubnet1:1}}"
        - !Sub "{{resolve:ssm:/${BusinessUnit}/${EnvironmentName}/privatesubnet2:1}}"
      MinSize: !Ref WAMinSize
      MaxSize: !Ref WAMaxSize
      DesiredCapacity: !Ref DesiredCapacity
      NotificationConfigurations:
      - TopicARN:
          !Ref SNSTopic
        NotificationTypes:
        - autoscaling:EC2_INSTANCE_LAUNCH
        - autoscaling:EC2_INSTANCE_LAUNCH_ERROR
        - autoscaling:EC2_INSTANCE_TERMINATE
        - autoscaling:EC2_INSTANCE_TERMINATE_ERROR
      Tags:
        - Key: Businessunit
          Value: !Ref BusinessUnit
          PropagateAtLaunch: "true"
        - Key: Environment
          Value: !Ref EnvironmentName
          PropagateAtLaunch: "true"
        - Key: Component
          Value: ecs
          PropagateAtLaunch: "true"
          PropagateAtLaunch: "true"
        - Key: Backup 
          Value: Weekly
          PropagateAtLaunch: "true"
        - Key: Deployment
          Value: PROD:PREP
          PropagateAtLaunch: "true"
        - Key: Project
          Value: APIMONETIZATION
          PropagateAtLaunch: "true"
        - Key: Cost Center
          Value: ISG-TECAPIMON/18
          PropagateAtLaunch: "true"
        - Key: WBS Code
          Value: ISG-TECAPIMON/18 
          PropagateAtLaunch: "true" 
        - Key: Name
          Value: VMAPMAPD01 
          PropagateAtLaunch: "true"
        - Key: Platform Name
          Value: APIMONETIZATION
          PropagateAtLaunch: "true"
        
    

  ECSLaunchConfigurationWA:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: false
      ImageId: !Ref ECSAMI
      InstanceType: !Ref InstanceType2
      KeyName: !Ref KeyName
      SecurityGroups:
        - !Ref ECSSecurityGroup
      IamInstanceProfile: !Ref ECSInstanceProfile
      BlockDeviceMappings: 
        - DeviceName: "/dev/xvda"
          Ebs: 
            VolumeSize: !Ref ECSVolumeSize
            DeleteOnTermination: true
            Encrypted: true
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          sed -i 's/globe-qa-cluster/apim-prod-webapp-cluster/' /etc/ecs/ecs.config
          docker rm -vf ecs-agent
          rm -rf /var/lib/ecs/data/ecs_agent_data.json
          docker run --name ecs-agent --detach=true --restart=on-failure:10 --volume=/var/run:/var/run --volume=/var/log/ecs/:/log --volume=/var/lib/ecs/data:/data --volume=/etc/ecs:/etc/ecs --net=host --env-file=/etc/ecs/ecs.config amazon/amazon-ecs-agent:latest
          mkdir -p /opt/aws/bin
          wget https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
          easy_install --script-dir /opt/aws/bin aws-cfn-bootstrap-latest.tar.gz
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ECSAutoScalingGroup --region ${AWS::Region}

  ECSRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Action": "sts:AssumeRole",
                "Effect": "Allow",
                "Principal": {
                    "Service": "ec2.amazonaws.com"
                }
            }]
        }
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
      Policies:
        - PolicyName: ecs-service
          PolicyDocument: |
            {
                "Statement": [{
                    "Effect": "Allow",
                    "Action": [
                        "ecs:CreateCluster",
                        "ecs:DeregisterContainerInstance",
                        "ecs:DiscoverPollEndpoint",
                        "ecs:Poll",
                        "ecs:RegisterContainerInstance",
                        "ecs:StartTelemetrySession",
                        "ecs:Submit*",
                        "logs:CreateLogStream",
                        "logs:PutLogEvents",
                        "ecr:BatchCheckLayerAvailability",
                        "ecr:BatchGetImage",
                        "ecr:GetDownloadUrlForLayer",
                        "ecr:GetAuthorizationToken",
                        "secretsmanager:UntagResource",
                        "secretsmanager:DescribeSecret",
                        "secretsmanager:PutSecretValue",
                        "secretsmanager:CreateSecret",
                        "secretsmanager:ListSecretVersionIds",
                        "secretsmanager:UpdateSecret",
                        "secretsmanager:GetRandomPassword",
                        "secretsmanager:GetResourcePolicy",
                        "secretsmanager:GetSecretValue",
                        "secretsmanager:PutResourcePolicy",
                        "secretsmanager:UpdateSecretVersionStage",
                        "secretsmanager:ListSecrets",
                        "secretsmanager:TagResource",
                        "kms:ImportKeyMaterial",
                        "kms:GetPublicKey",
                        "kms:Decrypt",
                        "kms:ListKeyPolicies",
                        "kms:ListRetirableGrants",
                        "kms:GetKeyPolicy",
                        "kms:GenerateDataKeyWithoutPlaintext",
                        "kms:Verify",
                        "kms:ListResourceTags",
                        "kms:GenerateDataKeyPairWithoutPlaintext",
                        "kms:GenerateDataKeyPair",
                        "kms:ListGrants",
                        "kms:GetParametersForImport",
                        "kms:DescribeCustomKeyStores",
                        "kms:ListKeys",
                        "kms:TagResource",
                        "kms:GetKeyRotationStatus",
                        "kms:Encrypt",
                        "kms:ListAliases",
                        "kms:GenerateDataKey",
                        "kms:DescribeKey",
                        "kms:ConnectCustomKeyStore"
                    ],
                    "Resource": "apim-prod-*"
                }]
            }
        - PolicyName: S3-service
          PolicyDocument: |
            {
                "Statement": [{
                    "Effect": "Allow",
                    "Action": [ 
                        "s3:PutAnalyticsConfiguration",
                        "s3:GetObjectVersionTagging",
                        "s3:CreateBucket",
                        "s3:ReplicateObject",
                        "s3:GetObjectAcl",
                        "s3:GetBucketObjectLockConfiguration",
                        "s3:PutLifecycleConfiguration",
                        "s3:GetObjectVersionAcl",
                        "s3:PutBucketAcl",
                        "s3:PutObjectTagging",
                        "s3:GetBucketPolicyStatus",
                        "s3:GetObjectRetention",
                        "s3:GetBucketWebsite",
                        "s3:ListJobs",
                        "s3:PutReplicationConfiguration",
                        "s3:PutObjectLegalHold",
                        "s3:GetObjectLegalHold",
                        "s3:GetBucketNotification",
                        "s3:PutBucketCORS",
                        "s3:GetReplicationConfiguration",
                        "s3:ListMultipartUploadParts",
                        "s3:PutObject",
                        "s3:GetObject",
                        "s3:PutBucketNotification",
                        "s3:DescribeJob",
                        "s3:PutBucketLogging",
                        "s3:PutObjectVersionAcl",
                        "s3:PutBucketObjectLockConfiguration",
                        "s3:GetObjectVersionForReplication",
                        "s3:CreateJob",
                        "s3:CreateAccessPoint",
                        "s3:GetLifecycleConfiguration",
                        "s3:GetInventoryConfiguration",
                        "s3:GetBucketTagging",
                        "s3:PutAccelerateConfiguration",
                        "s3:GetBucketLogging",
                        "s3:ListBucketVersions",
                        "s3:RestoreObject",
                        "s3:ListBucket",
                        "s3:GetBucketPolicy",
                        "s3:PutEncryptionConfiguration",
                        "s3:GetEncryptionConfiguration",
                        "s3:GetObjectVersionTorrent",
                        "s3:PutBucketTagging",
                        "s3:GetBucketRequestPayment",
                        "s3:UpdateJobPriority",
                        "s3:GetObjectTagging",
                        "s3:GetMetricsConfiguration",
                        "s3:PutBucketVersioning",
                        "s3:PutObjectAcl",
                        "s3:GetBucketPublicAccessBlock",
                        "s3:ListBucketMultipartUploads",
                        "s3:PutBucketPublicAccessBlock",
                        "s3:ListAccessPoints",
                        "s3:PutMetricsConfiguration",
                        "s3:PutObjectVersionTagging",
                        "s3:UpdateJobStatus",
                        "s3:GetBucketVersioning",
                        "s3:GetBucketAcl",
                        "s3:PutInventoryConfiguration",
                        "s3:GetObjectTorrent",
                        "s3:PutBucketWebsite",
                        "s3:ListAllMyBuckets",
                        "s3:PutBucketRequestPayment",
                        "s3:PutObjectRetention",
                        "s3:GetBucketCORS",
                        "s3:PutBucketPolicy",
                        "s3:GetBucketLocation",
                        "s3:ReplicateDelete",
                        "s3:GetObjectVersion"     
                    ],
                    "Resource": "apim-prod-*"
                }]
        - PolicyName: Cloudwatch-Loggroup
          PolicyDocument: |
            {
                "Statement": [{
                    "Effect": "Allow",
                    "Action": [ 
                        "logs:ListTagsLogGroup",
                        "logs:GetLogRecord",
                        "logs:DescribeLogStreams",
                        "logs:DescribeSubscriptionFilters",
                        "logs:StartQuery",
                        "logs:DescribeMetricFilters",
                        "logs:GetLogDelivery",
                        "logs:ListLogDeliveries",
                        "logs:CreateLogStream",
                        "logs:TagLogGroup",
                        "logs:GetLogEvents",
                        "logs:FilterLogEvents",
                        "logs:PutDestination",
                        "logs:DescribeResourcePolicies",
                        "logs:DescribeQueries",
                        "logs:UntagLogGroup",
                        "logs:DescribeLogGroups",
                        "logs:PutDestinationPolicy",
                        "logs:StopQuery",
                        "logs:TestMetricFilter",
                        "logs:PutLogEvents",
                        "logs:CreateLogGroup",
                        "logs:PutMetricFilter",
                        "logs:CreateLogDelivery",
                        "logs:PutResourcePolicy",
                        "logs:GetQueryResults",
                        "logs:UpdateLogDelivery",
                        "logs:PutSubscriptionFilter",
                        "logs:PutRetentionPolicy",
                        "logs:GetLogGroupFields" 
                    ],
                    "Resource": "apim-prod-*"
                }]    
  ECSInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref ECSRole

  ECSServiceAutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Action:
            - "sts:AssumeRole"
          Effect: Allow
          Principal:
            Service:
              - application-autoscaling.amazonaws.com
      Path: /
      Policies:
        - PolicyName: ecs-service-autoscaling
          PolicyDocument:
            Statement:
              Effect: Allow
              Action:
                - application-autoscaling:*
                - cloudwatch:DescribeAlarms
                - cloudwatch:PutMetricAlarm
                - ecs:DescribeServices
                - ecs:UpdateService
              Resource: "apim-prod-*"

  ECSSecurityGroupParameter:
    Type: "AWS::SSM::Parameter"
    DependsOn: ECSSecurityGroup
    Properties:
      Name: !Sub "/${BusinessUnit}/${EnvironmentName}/ecssecuritygroup"
      Type: "String"
      Value: !Ref ECSSecurityGroup
      
  SNSParameter:
    Type: "AWS::SSM::Parameter"
    DependsOn: SNSTopic
    Properties:
      Name: !Sub "/${BusinessUnit}/${EnvironmentName}/sns"
      Type: "String"
      Value: !Ref SNSTopic

Outputs:
  ClusterMS:
    Description: A reference to the ECS cluster
    Value: !Ref ECSClusterMS

  ClusterWA:
    Description: A reference to the ECS cluster
    Value: !Ref ECSClusterWA

  ECSServiceAutoScalingRole:
    Description: A reference to ECS service auto scaling role
    Value: !GetAtt ECSServiceAutoScalingRole.Arn

  ECSAutoScalingGroupMSName:
    Description: A reference to ECS AutoScaling Group Name
    Value: !Ref ECSAutoScalingGroupMS

  ECSAutoScalingGroupWAName:
    Description: A reference to ECS AutoScaling Group Name
    Value: !Ref ECSAutoScalingGroupWA